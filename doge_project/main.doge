//todo make array class that destructs and constructs and contains length
#import SL;


class a {
 void destruct(){
    printChars("\n a is destucted \n");
 }

}
class b{
a foo =  a();
a bar = a();
void destruct(){

    printChars("\n b is destucted \n");
 }

}

class template t{
type store;
void t(type thing){
store = thing;
}


type doThing(type other){
return store + other * store;
}


}
use t as numberT using int;
//main function
int main(){



numberT foo =  numberT(5);
print(foo.doThing(2));



/*
b fee = b();
b_ptr whee =  new b();
delete whee;


const int c = 3;
print(c);
*/

/*
print("size: \n");
{

string_ptr arr = local_array( string("aaaaa"),toInt(floatIn()));


print(" \n set: \n");
int i = toInt(floatIn());
print("to: \n");
arr[i] = string(charsIn());


print("get: \n");
arr[toInt(floatIn())].print();

}
print("wheeeee");
*/
return 0;

}
